{"ast":null,"code":"var inherits = require('util').inherits;\nvar Connection = require('./Connection');\nvar Events = require('events');\nmodule.exports = PoolConnection;\ninherits(PoolConnection, Connection);\nfunction PoolConnection(pool, options) {\n  Connection.call(this, options);\n  this._pool = pool;\n\n  // Bind connection to pool domain\n  if (Events.usingDomains) {\n    this.domain = pool.domain;\n  }\n\n  // When a fatal error occurs the connection's protocol ends, which will cause\n  // the connection to end as well, thus we only need to watch for the end event\n  // and we will be notified of disconnects.\n  this.on('end', this._removeFromPool);\n  this.on('error', function (err) {\n    if (err.fatal) {\n      this._removeFromPool();\n    }\n  });\n}\nPoolConnection.prototype.release = function release() {\n  var pool = this._pool;\n  if (!pool || pool._closed) {\n    return undefined;\n  }\n  return pool.releaseConnection(this);\n};\n\n// TODO: Remove this when we are removing PoolConnection#end\nPoolConnection.prototype._realEnd = Connection.prototype.end;\nPoolConnection.prototype.end = function () {\n  console.warn('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');\n  this.release();\n};\nPoolConnection.prototype.destroy = function () {\n  Connection.prototype.destroy.apply(this, arguments);\n  this._removeFromPool(this);\n};\nPoolConnection.prototype._removeFromPool = function _removeFromPool() {\n  if (!this._pool || this._pool._closed) {\n    return;\n  }\n  var pool = this._pool;\n  this._pool = null;\n  pool._purgeConnection(this);\n};","map":null,"metadata":{},"sourceType":"script"}