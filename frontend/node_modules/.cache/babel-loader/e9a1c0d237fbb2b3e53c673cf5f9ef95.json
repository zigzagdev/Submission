{"ast":null,"code":"var mysql = require('../');\nvar Connection = require('./Connection');\nvar EventEmitter = require('events').EventEmitter;\nvar Util = require('util');\nvar PoolConnection = require('./PoolConnection');\nmodule.exports = Pool;\nUtil.inherits(Pool, EventEmitter);\nfunction Pool(options) {\n  EventEmitter.call(this);\n  this.config = options.config;\n  this.config.connectionConfig.pool = this;\n  this._acquiringConnections = [];\n  this._allConnections = [];\n  this._freeConnections = [];\n  this._connectionQueue = [];\n  this._closed = false;\n}\nPool.prototype.getConnection = function (cb) {\n  if (this._closed) {\n    var err = new Error('Pool is closed.');\n    err.code = 'POOL_CLOSED';\n    process.nextTick(function () {\n      cb(err);\n    });\n    return;\n  }\n  var connection;\n  var pool = this;\n  if (this._freeConnections.length > 0) {\n    connection = this._freeConnections.shift();\n    this.acquireConnection(connection, cb);\n    return;\n  }\n  if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n    connection = new PoolConnection(this, {\n      config: this.config.newConnectionConfig()\n    });\n    this._acquiringConnections.push(connection);\n    this._allConnections.push(connection);\n    connection.connect({\n      timeout: this.config.acquireTimeout\n    }, function onConnect(err) {\n      spliceConnection(pool._acquiringConnections, connection);\n      if (pool._closed) {\n        err = new Error('Pool is closed.');\n        err.code = 'POOL_CLOSED';\n      }\n      if (err) {\n        pool._purgeConnection(connection);\n        cb(err);\n        return;\n      }\n      pool.emit('connection', connection);\n      pool.emit('acquire', connection);\n      cb(null, connection);\n    });\n    return;\n  }\n  if (!this.config.waitForConnections) {\n    process.nextTick(function () {\n      var err = new Error('No connections available.');\n      err.code = 'POOL_CONNLIMIT';\n      cb(err);\n    });\n    return;\n  }\n  this._enqueueCallback(cb);\n};\nPool.prototype.acquireConnection = function acquireConnection(connection, cb) {\n  if (connection._pool !== this) {\n    throw new Error('Connection acquired from wrong pool.');\n  }\n  var changeUser = this._needsChangeUser(connection);\n  var pool = this;\n  this._acquiringConnections.push(connection);\n  function onOperationComplete(err) {\n    spliceConnection(pool._acquiringConnections, connection);\n    if (pool._closed) {\n      err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n    }\n    if (err) {\n      pool._connectionQueue.unshift(cb);\n      pool._purgeConnection(connection);\n      return;\n    }\n    if (changeUser) {\n      pool.emit('connection', connection);\n    }\n    pool.emit('acquire', connection);\n    cb(null, connection);\n  }\n  if (changeUser) {\n    // restore user back to pool configuration\n    connection.config = this.config.newConnectionConfig();\n    connection.changeUser({\n      timeout: this.config.acquireTimeout\n    }, onOperationComplete);\n  } else {\n    // ping connection\n    connection.ping({\n      timeout: this.config.acquireTimeout\n    }, onOperationComplete);\n  }\n};\nPool.prototype.releaseConnection = function releaseConnection(connection) {\n  if (this._acquiringConnections.indexOf(connection) !== -1) {\n    // connection is being acquired\n    return;\n  }\n  if (connection._pool) {\n    if (connection._pool !== this) {\n      throw new Error('Connection released to wrong pool');\n    }\n    if (this._freeConnections.indexOf(connection) !== -1) {\n      // connection already in free connection pool\n      // this won't catch all double-release cases\n      throw new Error('Connection already released');\n    } else {\n      // add connection to end of free queue\n      this._freeConnections.push(connection);\n      this.emit('release', connection);\n    }\n  }\n  if (this._closed) {\n    // empty the connection queue\n    this._connectionQueue.splice(0).forEach(function (cb) {\n      var err = new Error('Pool is closed.');\n      err.code = 'POOL_CLOSED';\n      process.nextTick(function () {\n        cb(err);\n      });\n    });\n  } else if (this._connectionQueue.length) {\n    // get connection with next waiting callback\n    this.getConnection(this._connectionQueue.shift());\n  }\n};\nPool.prototype.end = function (cb) {\n  this._closed = true;\n  if (typeof cb !== 'function') {\n    cb = function cb(err) {\n      if (err) throw err;\n    };\n  }\n  var calledBack = false;\n  var waitingClose = 0;\n  function onEnd(err) {\n    if (!calledBack && (err || --waitingClose <= 0)) {\n      calledBack = true;\n      cb(err);\n    }\n  }\n  while (this._allConnections.length !== 0) {\n    waitingClose++;\n    this._purgeConnection(this._allConnections[0], onEnd);\n  }\n  if (waitingClose === 0) {\n    process.nextTick(onEnd);\n  }\n};\nPool.prototype.query = function (sql, values, cb) {\n  var query = Connection.createQuery(sql, values, cb);\n  if (!(typeof sql === 'object' && 'typeCast' in sql)) {\n    query.typeCast = this.config.connectionConfig.typeCast;\n  }\n  if (this.config.connectionConfig.trace) {\n    // Long stack trace support\n    query._callSite = new Error();\n  }\n  this.getConnection(function (err, conn) {\n    if (err) {\n      query.on('error', function () {});\n      query.end(err);\n      return;\n    }\n\n    // Release connection based off event\n    query.once('end', function () {\n      conn.release();\n    });\n    conn.query(query);\n  });\n  return query;\n};\nPool.prototype._enqueueCallback = function _enqueueCallback(callback) {\n  if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n    process.nextTick(function () {\n      var err = new Error('Queue limit reached.');\n      err.code = 'POOL_ENQUEUELIMIT';\n      callback(err);\n    });\n    return;\n  }\n\n  // Bind to domain, as dequeue will likely occur in a different domain\n  var cb = process.domain ? process.domain.bind(callback) : callback;\n  this._connectionQueue.push(cb);\n  this.emit('enqueue');\n};\nPool.prototype._needsChangeUser = function _needsChangeUser(connection) {\n  var connConfig = connection.config;\n  var poolConfig = this.config.connectionConfig;\n\n  // check if changeUser values are different\n  return connConfig.user !== poolConfig.user || connConfig.database !== poolConfig.database || connConfig.password !== poolConfig.password || connConfig.charsetNumber !== poolConfig.charsetNumber;\n};\nPool.prototype._purgeConnection = function _purgeConnection(connection, callback) {\n  var cb = callback || function () {};\n  if (connection.state === 'disconnected') {\n    connection.destroy();\n  }\n  this._removeConnection(connection);\n  if (connection.state !== 'disconnected' && !connection._protocol._quitSequence) {\n    connection._realEnd(cb);\n    return;\n  }\n  process.nextTick(cb);\n};\nPool.prototype._removeConnection = function (connection) {\n  connection._pool = null;\n\n  // Remove connection from all connections\n  spliceConnection(this._allConnections, connection);\n\n  // Remove connection from free connections\n  spliceConnection(this._freeConnections, connection);\n  this.releaseConnection(connection);\n};\nPool.prototype.escape = function (value) {\n  return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n};\nPool.prototype.escapeId = function escapeId(value) {\n  return mysql.escapeId(value, false);\n};\nfunction spliceConnection(array, connection) {\n  var index;\n  if ((index = array.indexOf(connection)) !== -1) {\n    // Remove connection from all connections\n    array.splice(index, 1);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}