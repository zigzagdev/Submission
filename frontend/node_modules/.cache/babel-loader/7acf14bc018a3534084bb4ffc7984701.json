{"ast":null,"code":"var Connection = require('./Connection');\nvar PoolSelector = require('./PoolSelector');\nmodule.exports = PoolNamespace;\n\n/**\n * PoolNamespace\n * @constructor\n * @param {PoolCluster} cluster The parent cluster for the namespace\n * @param {string} pattern The selection pattern to use\n * @param {string} selector The selector name to use\n * @public\n */\nfunction PoolNamespace(cluster, pattern, selector) {\n  this._cluster = cluster;\n  this._pattern = pattern;\n  this._selector = new PoolSelector[selector]();\n}\nPoolNamespace.prototype.getConnection = function (cb) {\n  var clusterNode = this._getClusterNode();\n  var cluster = this._cluster;\n  var namespace = this;\n  if (clusterNode === null) {\n    var err = null;\n    if (this._cluster._findNodeIds(this._pattern, true).length !== 0) {\n      err = new Error('Pool does not have online node.');\n      err.code = 'POOL_NONEONLINE';\n    } else {\n      err = new Error('Pool does not exist.');\n      err.code = 'POOL_NOEXIST';\n    }\n    cb(err);\n    return;\n  }\n  cluster._getConnection(clusterNode, function (err, connection) {\n    var retry = err && cluster._canRetry && cluster._findNodeIds(namespace._pattern).length !== 0;\n    if (retry) {\n      namespace.getConnection(cb);\n      return;\n    }\n    if (err) {\n      cb(err);\n      return;\n    }\n    cb(null, connection);\n  });\n};\nPoolNamespace.prototype.query = function (sql, values, cb) {\n  var cluster = this._cluster;\n  var clusterNode = this._getClusterNode();\n  var query = Connection.createQuery(sql, values, cb);\n  var namespace = this;\n  if (clusterNode === null) {\n    var err = null;\n    if (this._cluster._findNodeIds(this._pattern, true).length !== 0) {\n      err = new Error('Pool does not have online node.');\n      err.code = 'POOL_NONEONLINE';\n    } else {\n      err = new Error('Pool does not exist.');\n      err.code = 'POOL_NOEXIST';\n    }\n    process.nextTick(function () {\n      query.on('error', function () {});\n      query.end(err);\n    });\n    return query;\n  }\n  if (!(typeof sql === 'object' && 'typeCast' in sql)) {\n    query.typeCast = clusterNode.pool.config.connectionConfig.typeCast;\n  }\n  if (clusterNode.pool.config.connectionConfig.trace) {\n    // Long stack trace support\n    query._callSite = new Error();\n  }\n  cluster._getConnection(clusterNode, function (err, conn) {\n    var retry = err && cluster._canRetry && cluster._findNodeIds(namespace._pattern).length !== 0;\n    if (retry) {\n      namespace.query(query);\n      return;\n    }\n    if (err) {\n      query.on('error', function () {});\n      query.end(err);\n      return;\n    }\n\n    // Release connection based off event\n    query.once('end', function () {\n      conn.release();\n    });\n    conn.query(query);\n  });\n  return query;\n};\nPoolNamespace.prototype._getClusterNode = function _getClusterNode() {\n  var foundNodeIds = this._cluster._findNodeIds(this._pattern);\n  var nodeId;\n  switch (foundNodeIds.length) {\n    case 0:\n      nodeId = null;\n      break;\n    case 1:\n      nodeId = foundNodeIds[0];\n      break;\n    default:\n      nodeId = this._selector(foundNodeIds);\n      break;\n  }\n  return nodeId !== null ? this._cluster._getNode(nodeId) : null;\n};","map":null,"metadata":{},"sourceType":"script"}