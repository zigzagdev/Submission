{"ast":null,"code":"var Pool = require('./Pool');\nvar PoolConfig = require('./PoolConfig');\nvar PoolNamespace = require('./PoolNamespace');\nvar PoolSelector = require('./PoolSelector');\nvar Util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nmodule.exports = PoolCluster;\n\n/**\n * PoolCluster\n * @constructor\n * @param {object} [config] The pool cluster configuration\n * @public\n */\nfunction PoolCluster(config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this._canRetry = typeof config.canRetry === 'undefined' ? true : config.canRetry;\n  this._defaultSelector = config.defaultSelector || 'RR';\n  this._removeNodeErrorCount = config.removeNodeErrorCount || 5;\n  this._restoreNodeTimeout = config.restoreNodeTimeout || 0;\n  this._closed = false;\n  this._findCaches = Object.create(null);\n  this._lastId = 0;\n  this._namespaces = Object.create(null);\n  this._nodes = Object.create(null);\n}\nUtil.inherits(PoolCluster, EventEmitter);\nPoolCluster.prototype.add = function add(id, config) {\n  if (this._closed) {\n    throw new Error('PoolCluster is closed.');\n  }\n  var nodeId = typeof id === 'object' ? 'CLUSTER::' + ++this._lastId : String(id);\n  if (this._nodes[nodeId] !== undefined) {\n    throw new Error('Node ID \"' + nodeId + '\" is already defined in PoolCluster.');\n  }\n  var poolConfig = typeof id !== 'object' ? new PoolConfig(config) : new PoolConfig(id);\n  this._nodes[nodeId] = {\n    id: nodeId,\n    errorCount: 0,\n    pool: new Pool({\n      config: poolConfig\n    }),\n    _offlineUntil: 0\n  };\n  this._clearFindCaches();\n};\nPoolCluster.prototype.end = function end(callback) {\n  var cb = callback !== undefined ? callback : _cb;\n  if (typeof cb !== 'function') {\n    throw TypeError('callback argument must be a function');\n  }\n  if (this._closed) {\n    process.nextTick(cb);\n    return;\n  }\n  this._closed = true;\n  var calledBack = false;\n  var nodeIds = Object.keys(this._nodes);\n  var waitingClose = 0;\n  function onEnd(err) {\n    if (!calledBack && (err || --waitingClose <= 0)) {\n      calledBack = true;\n      cb(err);\n    }\n  }\n  for (var i = 0; i < nodeIds.length; i++) {\n    var nodeId = nodeIds[i];\n    var node = this._nodes[nodeId];\n    waitingClose++;\n    node.pool.end(onEnd);\n  }\n  if (waitingClose === 0) {\n    process.nextTick(onEnd);\n  }\n};\nPoolCluster.prototype.of = function (pattern, selector) {\n  pattern = pattern || '*';\n  selector = selector || this._defaultSelector;\n  selector = selector.toUpperCase();\n  if (typeof PoolSelector[selector] === 'undefined') {\n    selector = this._defaultSelector;\n  }\n  var key = pattern + selector;\n  if (typeof this._namespaces[key] === 'undefined') {\n    this._namespaces[key] = new PoolNamespace(this, pattern, selector);\n  }\n  return this._namespaces[key];\n};\nPoolCluster.prototype.remove = function remove(pattern) {\n  var foundNodeIds = this._findNodeIds(pattern, true);\n  for (var i = 0; i < foundNodeIds.length; i++) {\n    var node = this._getNode(foundNodeIds[i]);\n    if (node) {\n      this._removeNode(node);\n    }\n  }\n};\nPoolCluster.prototype.getConnection = function (pattern, selector, cb) {\n  var namespace;\n  if (typeof pattern === 'function') {\n    cb = pattern;\n    namespace = this.of();\n  } else {\n    if (typeof selector === 'function') {\n      cb = selector;\n      selector = this._defaultSelector;\n    }\n    namespace = this.of(pattern, selector);\n  }\n  namespace.getConnection(cb);\n};\nPoolCluster.prototype._clearFindCaches = function _clearFindCaches() {\n  this._findCaches = Object.create(null);\n};\nPoolCluster.prototype._decreaseErrorCount = function _decreaseErrorCount(node) {\n  var errorCount = node.errorCount;\n  if (errorCount > this._removeNodeErrorCount) {\n    errorCount = this._removeNodeErrorCount;\n  }\n  if (errorCount < 1) {\n    errorCount = 1;\n  }\n  node.errorCount = errorCount - 1;\n  if (node._offlineUntil) {\n    node._offlineUntil = 0;\n    this.emit('online', node.id);\n  }\n};\nPoolCluster.prototype._findNodeIds = function _findNodeIds(pattern, includeOffline) {\n  var currentTime = 0;\n  var foundNodeIds = this._findCaches[pattern];\n  if (foundNodeIds === undefined) {\n    var expression = patternRegExp(pattern);\n    var nodeIds = Object.keys(this._nodes);\n    foundNodeIds = nodeIds.filter(function (id) {\n      return id.match(expression);\n    });\n    this._findCaches[pattern] = foundNodeIds;\n  }\n  if (includeOffline) {\n    return foundNodeIds;\n  }\n  return foundNodeIds.filter(function (nodeId) {\n    var node = this._getNode(nodeId);\n    if (!node._offlineUntil) {\n      return true;\n    }\n    if (!currentTime) {\n      currentTime = getMonotonicMilliseconds();\n    }\n    return node._offlineUntil <= currentTime;\n  }, this);\n};\nPoolCluster.prototype._getNode = function _getNode(id) {\n  return this._nodes[id] || null;\n};\nPoolCluster.prototype._increaseErrorCount = function _increaseErrorCount(node) {\n  var errorCount = ++node.errorCount;\n  if (this._removeNodeErrorCount > errorCount) {\n    return;\n  }\n  if (this._restoreNodeTimeout > 0) {\n    node._offlineUntil = getMonotonicMilliseconds() + this._restoreNodeTimeout;\n    this.emit('offline', node.id);\n    return;\n  }\n  this._removeNode(node);\n  this.emit('remove', node.id);\n};\nPoolCluster.prototype._getConnection = function (node, cb) {\n  var self = this;\n  node.pool.getConnection(function (err, connection) {\n    if (err) {\n      self._increaseErrorCount(node);\n      cb(err);\n      return;\n    } else {\n      self._decreaseErrorCount(node);\n    }\n    connection._clusterId = node.id;\n    cb(null, connection);\n  });\n};\nPoolCluster.prototype._removeNode = function _removeNode(node) {\n  delete this._nodes[node.id];\n  this._clearFindCaches();\n  node.pool.end(_noop);\n};\nfunction getMonotonicMilliseconds() {\n  var ms;\n  if (typeof process.hrtime === 'function') {\n    ms = process.hrtime();\n    ms = ms[0] * 1e3 + ms[1] * 1e-6;\n  } else {\n    ms = process.uptime() * 1000;\n  }\n  return Math.floor(ms);\n}\nfunction isRegExp(val) {\n  return typeof val === 'object' && Object.prototype.toString.call(val) === '[object RegExp]';\n}\nfunction patternRegExp(pattern) {\n  if (isRegExp(pattern)) {\n    return pattern;\n  }\n  var source = pattern.replace(/([.+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1').replace(/\\*/g, '.*');\n  return new RegExp('^' + source + '$');\n}\nfunction _cb(err) {\n  if (err) {\n    throw err;\n  }\n}\nfunction _noop() {}","map":null,"metadata":{},"sourceType":"script"}